// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(Progetto_FormativoContext))]
    [Migration("20250320133543_fixstored")]
    partial class fixstored
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Entities.CostRegistry", b =>
                {
                    b.Property<int>("CostRegistryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CostRegistryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostRegistryID"), 1L, 1);

                    b.Property<string>("CostRegistryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostRegistryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostRegistryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CostRegistryUniqueCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CostRegistryID");

                    b.ToTable("CostRegistries", (string)null);

                    b.HasData(
                        new
                        {
                            CostRegistryID = 1,
                            CostRegistryName = "Generic",
                            CostRegistryPrice = 1m,
                            CostRegistryQuantity = 1,
                            CostRegistryUniqueCode = "GNC"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ISOCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CountryID");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.HasIndex("ISOCode")
                        .IsUnique();

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryName = "Afghanistan",
                            ISOCode = "AF"
                        },
                        new
                        {
                            CountryID = 2,
                            CountryName = "Albania",
                            ISOCode = "AL"
                        },
                        new
                        {
                            CountryID = 3,
                            CountryName = "Algeria",
                            ISOCode = "DZ"
                        },
                        new
                        {
                            CountryID = 4,
                            CountryName = "Andorra",
                            ISOCode = "AD"
                        },
                        new
                        {
                            CountryID = 5,
                            CountryName = "Angola",
                            ISOCode = "AO"
                        },
                        new
                        {
                            CountryID = 6,
                            CountryName = "Antigua and Barbuda",
                            ISOCode = "AG"
                        },
                        new
                        {
                            CountryID = 7,
                            CountryName = "Argentina",
                            ISOCode = "AR"
                        },
                        new
                        {
                            CountryID = 8,
                            CountryName = "Armenia",
                            ISOCode = "AM"
                        },
                        new
                        {
                            CountryID = 9,
                            CountryName = "Australia",
                            ISOCode = "AU"
                        },
                        new
                        {
                            CountryID = 10,
                            CountryName = "Austria",
                            ISOCode = "AT"
                        },
                        new
                        {
                            CountryID = 11,
                            CountryName = "Azerbaijan",
                            ISOCode = "AZ"
                        },
                        new
                        {
                            CountryID = 12,
                            CountryName = "Bahamas",
                            ISOCode = "BS"
                        },
                        new
                        {
                            CountryID = 13,
                            CountryName = "Bahrain",
                            ISOCode = "BH"
                        },
                        new
                        {
                            CountryID = 14,
                            CountryName = "Bangladesh",
                            ISOCode = "BD"
                        },
                        new
                        {
                            CountryID = 15,
                            CountryName = "Barbados",
                            ISOCode = "BB"
                        },
                        new
                        {
                            CountryID = 16,
                            CountryName = "Belarus",
                            ISOCode = "BY"
                        },
                        new
                        {
                            CountryID = 17,
                            CountryName = "Belgium",
                            ISOCode = "BE"
                        },
                        new
                        {
                            CountryID = 18,
                            CountryName = "Belize",
                            ISOCode = "BZ"
                        },
                        new
                        {
                            CountryID = 19,
                            CountryName = "Benin",
                            ISOCode = "BJ"
                        },
                        new
                        {
                            CountryID = 20,
                            CountryName = "Bhutan",
                            ISOCode = "BT"
                        },
                        new
                        {
                            CountryID = 21,
                            CountryName = "Bolivia",
                            ISOCode = "BO"
                        },
                        new
                        {
                            CountryID = 22,
                            CountryName = "Bosnia and Herzegovina",
                            ISOCode = "BA"
                        },
                        new
                        {
                            CountryID = 23,
                            CountryName = "Botswana",
                            ISOCode = "BW"
                        },
                        new
                        {
                            CountryID = 24,
                            CountryName = "Brazil",
                            ISOCode = "BR"
                        },
                        new
                        {
                            CountryID = 25,
                            CountryName = "Brunei",
                            ISOCode = "BN"
                        },
                        new
                        {
                            CountryID = 26,
                            CountryName = "Bulgaria",
                            ISOCode = "BG"
                        },
                        new
                        {
                            CountryID = 27,
                            CountryName = "Burkina Faso",
                            ISOCode = "BF"
                        },
                        new
                        {
                            CountryID = 28,
                            CountryName = "Burundi",
                            ISOCode = "BI"
                        },
                        new
                        {
                            CountryID = 29,
                            CountryName = "Cabo Verde",
                            ISOCode = "CV"
                        },
                        new
                        {
                            CountryID = 30,
                            CountryName = "Cambodia",
                            ISOCode = "KH"
                        },
                        new
                        {
                            CountryID = 31,
                            CountryName = "Cameroon",
                            ISOCode = "CM"
                        },
                        new
                        {
                            CountryID = 32,
                            CountryName = "Canada",
                            ISOCode = "CA"
                        },
                        new
                        {
                            CountryID = 33,
                            CountryName = "Central African Republic",
                            ISOCode = "CF"
                        },
                        new
                        {
                            CountryID = 34,
                            CountryName = "Chad",
                            ISOCode = "TD"
                        },
                        new
                        {
                            CountryID = 35,
                            CountryName = "Chile",
                            ISOCode = "CL"
                        },
                        new
                        {
                            CountryID = 36,
                            CountryName = "China",
                            ISOCode = "CN"
                        },
                        new
                        {
                            CountryID = 37,
                            CountryName = "Colombia",
                            ISOCode = "CO"
                        },
                        new
                        {
                            CountryID = 38,
                            CountryName = "Comoros",
                            ISOCode = "KM"
                        },
                        new
                        {
                            CountryID = 39,
                            CountryName = "Congo (Congo-Brazzaville)",
                            ISOCode = "CG"
                        },
                        new
                        {
                            CountryID = 40,
                            CountryName = "Congo (Congo-Kinshasa)",
                            ISOCode = "CD"
                        },
                        new
                        {
                            CountryID = 41,
                            CountryName = "Costa Rica",
                            ISOCode = "CR"
                        },
                        new
                        {
                            CountryID = 42,
                            CountryName = "Croatia",
                            ISOCode = "HR"
                        },
                        new
                        {
                            CountryID = 43,
                            CountryName = "Cuba",
                            ISOCode = "CU"
                        },
                        new
                        {
                            CountryID = 44,
                            CountryName = "Cyprus",
                            ISOCode = "CY"
                        },
                        new
                        {
                            CountryID = 45,
                            CountryName = "Czechia",
                            ISOCode = "CZ"
                        },
                        new
                        {
                            CountryID = 46,
                            CountryName = "Denmark",
                            ISOCode = "DK"
                        },
                        new
                        {
                            CountryID = 47,
                            CountryName = "Djibouti",
                            ISOCode = "DJ"
                        },
                        new
                        {
                            CountryID = 48,
                            CountryName = "Dominica",
                            ISOCode = "DM"
                        },
                        new
                        {
                            CountryID = 49,
                            CountryName = "Dominican Republic",
                            ISOCode = "DO"
                        },
                        new
                        {
                            CountryID = 50,
                            CountryName = "Ecuador",
                            ISOCode = "EC"
                        },
                        new
                        {
                            CountryID = 51,
                            CountryName = "Egypt",
                            ISOCode = "EG"
                        },
                        new
                        {
                            CountryID = 52,
                            CountryName = "El Salvador",
                            ISOCode = "SV"
                        },
                        new
                        {
                            CountryID = 53,
                            CountryName = "Equatorial Guinea",
                            ISOCode = "GQ"
                        },
                        new
                        {
                            CountryID = 54,
                            CountryName = "Eritrea",
                            ISOCode = "ER"
                        },
                        new
                        {
                            CountryID = 55,
                            CountryName = "Estonia",
                            ISOCode = "EE"
                        },
                        new
                        {
                            CountryID = 56,
                            CountryName = "Eswatini",
                            ISOCode = "SZ"
                        },
                        new
                        {
                            CountryID = 57,
                            CountryName = "Ethiopia",
                            ISOCode = "ET"
                        },
                        new
                        {
                            CountryID = 58,
                            CountryName = "Fiji",
                            ISOCode = "FJ"
                        },
                        new
                        {
                            CountryID = 59,
                            CountryName = "Finland",
                            ISOCode = "FI"
                        },
                        new
                        {
                            CountryID = 60,
                            CountryName = "France",
                            ISOCode = "FR"
                        },
                        new
                        {
                            CountryID = 61,
                            CountryName = "Gabon",
                            ISOCode = "GA"
                        },
                        new
                        {
                            CountryID = 62,
                            CountryName = "Gambia",
                            ISOCode = "GM"
                        },
                        new
                        {
                            CountryID = 63,
                            CountryName = "Georgia",
                            ISOCode = "GE"
                        },
                        new
                        {
                            CountryID = 64,
                            CountryName = "Germany",
                            ISOCode = "DE"
                        },
                        new
                        {
                            CountryID = 65,
                            CountryName = "Ghana",
                            ISOCode = "GH"
                        },
                        new
                        {
                            CountryID = 66,
                            CountryName = "Greece",
                            ISOCode = "GR"
                        },
                        new
                        {
                            CountryID = 67,
                            CountryName = "Grenada",
                            ISOCode = "GD"
                        },
                        new
                        {
                            CountryID = 68,
                            CountryName = "Guatemala",
                            ISOCode = "GT"
                        },
                        new
                        {
                            CountryID = 69,
                            CountryName = "Guinea",
                            ISOCode = "GN"
                        },
                        new
                        {
                            CountryID = 70,
                            CountryName = "Guinea-Bissau",
                            ISOCode = "GW"
                        },
                        new
                        {
                            CountryID = 71,
                            CountryName = "Guyana",
                            ISOCode = "GY"
                        },
                        new
                        {
                            CountryID = 72,
                            CountryName = "Haiti",
                            ISOCode = "HT"
                        },
                        new
                        {
                            CountryID = 73,
                            CountryName = "Honduras",
                            ISOCode = "HN"
                        },
                        new
                        {
                            CountryID = 74,
                            CountryName = "Hungary",
                            ISOCode = "HU"
                        },
                        new
                        {
                            CountryID = 75,
                            CountryName = "Iceland",
                            ISOCode = "IS"
                        },
                        new
                        {
                            CountryID = 76,
                            CountryName = "India",
                            ISOCode = "IN"
                        },
                        new
                        {
                            CountryID = 77,
                            CountryName = "Indonesia",
                            ISOCode = "ID"
                        },
                        new
                        {
                            CountryID = 78,
                            CountryName = "Iran",
                            ISOCode = "IR"
                        },
                        new
                        {
                            CountryID = 79,
                            CountryName = "Iraq",
                            ISOCode = "IQ"
                        },
                        new
                        {
                            CountryID = 80,
                            CountryName = "Ireland",
                            ISOCode = "IE"
                        },
                        new
                        {
                            CountryID = 81,
                            CountryName = "Israel",
                            ISOCode = "IL"
                        },
                        new
                        {
                            CountryID = 82,
                            CountryName = "Italy",
                            ISOCode = "IT"
                        },
                        new
                        {
                            CountryID = 83,
                            CountryName = "Jamaica",
                            ISOCode = "JM"
                        },
                        new
                        {
                            CountryID = 84,
                            CountryName = "Japan",
                            ISOCode = "JP"
                        },
                        new
                        {
                            CountryID = 85,
                            CountryName = "Jordan",
                            ISOCode = "JO"
                        },
                        new
                        {
                            CountryID = 86,
                            CountryName = "Kazakhstan",
                            ISOCode = "KZ"
                        },
                        new
                        {
                            CountryID = 87,
                            CountryName = "Kenya",
                            ISOCode = "KE"
                        },
                        new
                        {
                            CountryID = 88,
                            CountryName = "Kiribati",
                            ISOCode = "KI"
                        },
                        new
                        {
                            CountryID = 89,
                            CountryName = "Korea, North",
                            ISOCode = "KP"
                        },
                        new
                        {
                            CountryID = 90,
                            CountryName = "Korea, South",
                            ISOCode = "KR"
                        },
                        new
                        {
                            CountryID = 91,
                            CountryName = "Kuwait",
                            ISOCode = "KW"
                        },
                        new
                        {
                            CountryID = 92,
                            CountryName = "Kyrgyzstan",
                            ISOCode = "KG"
                        },
                        new
                        {
                            CountryID = 93,
                            CountryName = "Laos",
                            ISOCode = "LA"
                        },
                        new
                        {
                            CountryID = 94,
                            CountryName = "Latvia",
                            ISOCode = "LV"
                        },
                        new
                        {
                            CountryID = 95,
                            CountryName = "Lebanon",
                            ISOCode = "LB"
                        },
                        new
                        {
                            CountryID = 96,
                            CountryName = "Lesotho",
                            ISOCode = "LS"
                        },
                        new
                        {
                            CountryID = 97,
                            CountryName = "Liberia",
                            ISOCode = "LR"
                        },
                        new
                        {
                            CountryID = 98,
                            CountryName = "Libya",
                            ISOCode = "LY"
                        },
                        new
                        {
                            CountryID = 99,
                            CountryName = "Liechtenstein",
                            ISOCode = "LI"
                        },
                        new
                        {
                            CountryID = 100,
                            CountryName = "Lithuania",
                            ISOCode = "LT"
                        },
                        new
                        {
                            CountryID = 101,
                            CountryName = "Luxembourg",
                            ISOCode = "LU"
                        },
                        new
                        {
                            CountryID = 102,
                            CountryName = "Madagascar",
                            ISOCode = "MG"
                        },
                        new
                        {
                            CountryID = 103,
                            CountryName = "Malawi",
                            ISOCode = "MW"
                        },
                        new
                        {
                            CountryID = 104,
                            CountryName = "Malaysia",
                            ISOCode = "MY"
                        },
                        new
                        {
                            CountryID = 105,
                            CountryName = "Maldives",
                            ISOCode = "MV"
                        },
                        new
                        {
                            CountryID = 106,
                            CountryName = "Mali",
                            ISOCode = "ML"
                        },
                        new
                        {
                            CountryID = 107,
                            CountryName = "Malta",
                            ISOCode = "MT"
                        },
                        new
                        {
                            CountryID = 108,
                            CountryName = "Marshall Islands",
                            ISOCode = "MH"
                        },
                        new
                        {
                            CountryID = 109,
                            CountryName = "Mauritania",
                            ISOCode = "MR"
                        },
                        new
                        {
                            CountryID = 110,
                            CountryName = "Mauritius",
                            ISOCode = "MU"
                        },
                        new
                        {
                            CountryID = 111,
                            CountryName = "Mexico",
                            ISOCode = "MX"
                        },
                        new
                        {
                            CountryID = 112,
                            CountryName = "Micronesia",
                            ISOCode = "FM"
                        },
                        new
                        {
                            CountryID = 113,
                            CountryName = "Moldova",
                            ISOCode = "MD"
                        },
                        new
                        {
                            CountryID = 114,
                            CountryName = "Monaco",
                            ISOCode = "MC"
                        },
                        new
                        {
                            CountryID = 115,
                            CountryName = "Mongolia",
                            ISOCode = "MN"
                        },
                        new
                        {
                            CountryID = 116,
                            CountryName = "Montenegro",
                            ISOCode = "ME"
                        },
                        new
                        {
                            CountryID = 117,
                            CountryName = "Morocco",
                            ISOCode = "MA"
                        },
                        new
                        {
                            CountryID = 118,
                            CountryName = "Mozambique",
                            ISOCode = "MZ"
                        },
                        new
                        {
                            CountryID = 119,
                            CountryName = "Myanmar",
                            ISOCode = "MM"
                        },
                        new
                        {
                            CountryID = 120,
                            CountryName = "Namibia",
                            ISOCode = "NA"
                        },
                        new
                        {
                            CountryID = 121,
                            CountryName = "Nauru",
                            ISOCode = "NR"
                        },
                        new
                        {
                            CountryID = 122,
                            CountryName = "Nepal",
                            ISOCode = "NP"
                        },
                        new
                        {
                            CountryID = 123,
                            CountryName = "Netherlands",
                            ISOCode = "NL"
                        },
                        new
                        {
                            CountryID = 124,
                            CountryName = "New Zealand",
                            ISOCode = "NZ"
                        },
                        new
                        {
                            CountryID = 125,
                            CountryName = "Nicaragua",
                            ISOCode = "NI"
                        },
                        new
                        {
                            CountryID = 126,
                            CountryName = "Niger",
                            ISOCode = "NE"
                        },
                        new
                        {
                            CountryID = 127,
                            CountryName = "Nigeria",
                            ISOCode = "NG"
                        },
                        new
                        {
                            CountryID = 128,
                            CountryName = "North Macedonia",
                            ISOCode = "MK"
                        },
                        new
                        {
                            CountryID = 129,
                            CountryName = "Norway",
                            ISOCode = "NO"
                        },
                        new
                        {
                            CountryID = 130,
                            CountryName = "Oman",
                            ISOCode = "OM"
                        },
                        new
                        {
                            CountryID = 131,
                            CountryName = "Pakistan",
                            ISOCode = "PK"
                        },
                        new
                        {
                            CountryID = 132,
                            CountryName = "Palau",
                            ISOCode = "PW"
                        },
                        new
                        {
                            CountryID = 133,
                            CountryName = "Palestine",
                            ISOCode = "PS"
                        },
                        new
                        {
                            CountryID = 134,
                            CountryName = "Panama",
                            ISOCode = "PA"
                        },
                        new
                        {
                            CountryID = 135,
                            CountryName = "Papua New Guinea",
                            ISOCode = "PG"
                        },
                        new
                        {
                            CountryID = 136,
                            CountryName = "Paraguay",
                            ISOCode = "PY"
                        },
                        new
                        {
                            CountryID = 137,
                            CountryName = "Peru",
                            ISOCode = "PE"
                        },
                        new
                        {
                            CountryID = 138,
                            CountryName = "Philippines",
                            ISOCode = "PH"
                        },
                        new
                        {
                            CountryID = 139,
                            CountryName = "Poland",
                            ISOCode = "PL"
                        },
                        new
                        {
                            CountryID = 140,
                            CountryName = "Portugal",
                            ISOCode = "PT"
                        },
                        new
                        {
                            CountryID = 141,
                            CountryName = "Qatar",
                            ISOCode = "QA"
                        },
                        new
                        {
                            CountryID = 142,
                            CountryName = "Romania",
                            ISOCode = "RO"
                        },
                        new
                        {
                            CountryID = 143,
                            CountryName = "Russia",
                            ISOCode = "RU"
                        },
                        new
                        {
                            CountryID = 144,
                            CountryName = "Rwanda",
                            ISOCode = "RW"
                        },
                        new
                        {
                            CountryID = 145,
                            CountryName = "Saint Kitts and Nevis",
                            ISOCode = "KN"
                        },
                        new
                        {
                            CountryID = 146,
                            CountryName = "Saint Lucia",
                            ISOCode = "LC"
                        },
                        new
                        {
                            CountryID = 147,
                            CountryName = "Saint Vincent and the Grenadines",
                            ISOCode = "VC"
                        },
                        new
                        {
                            CountryID = 148,
                            CountryName = "Samoa",
                            ISOCode = "WS"
                        },
                        new
                        {
                            CountryID = 149,
                            CountryName = "San Marino",
                            ISOCode = "SM"
                        },
                        new
                        {
                            CountryID = 150,
                            CountryName = "Sao Tome and Principe",
                            ISOCode = "ST"
                        },
                        new
                        {
                            CountryID = 151,
                            CountryName = "Saudi Arabia",
                            ISOCode = "SA"
                        },
                        new
                        {
                            CountryID = 152,
                            CountryName = "Senegal",
                            ISOCode = "SN"
                        },
                        new
                        {
                            CountryID = 153,
                            CountryName = "Serbia",
                            ISOCode = "RS"
                        },
                        new
                        {
                            CountryID = 154,
                            CountryName = "Seychelles",
                            ISOCode = "SC"
                        },
                        new
                        {
                            CountryID = 155,
                            CountryName = "Sierra Leone",
                            ISOCode = "SL"
                        },
                        new
                        {
                            CountryID = 156,
                            CountryName = "Singapore",
                            ISOCode = "SG"
                        },
                        new
                        {
                            CountryID = 157,
                            CountryName = "Slovakia",
                            ISOCode = "SK"
                        },
                        new
                        {
                            CountryID = 158,
                            CountryName = "Slovenia",
                            ISOCode = "SI"
                        },
                        new
                        {
                            CountryID = 159,
                            CountryName = "Solomon Islands",
                            ISOCode = "SB"
                        },
                        new
                        {
                            CountryID = 160,
                            CountryName = "Somalia",
                            ISOCode = "SO"
                        },
                        new
                        {
                            CountryID = 161,
                            CountryName = "South Africa",
                            ISOCode = "ZA"
                        },
                        new
                        {
                            CountryID = 162,
                            CountryName = "South Sudan",
                            ISOCode = "SS"
                        },
                        new
                        {
                            CountryID = 163,
                            CountryName = "Spain",
                            ISOCode = "ES"
                        },
                        new
                        {
                            CountryID = 164,
                            CountryName = "Sri Lanka",
                            ISOCode = "LK"
                        },
                        new
                        {
                            CountryID = 165,
                            CountryName = "Sudan",
                            ISOCode = "SD"
                        },
                        new
                        {
                            CountryID = 166,
                            CountryName = "Suriname",
                            ISOCode = "SR"
                        },
                        new
                        {
                            CountryID = 167,
                            CountryName = "Sweden",
                            ISOCode = "SE"
                        },
                        new
                        {
                            CountryID = 168,
                            CountryName = "Switzerland",
                            ISOCode = "CH"
                        },
                        new
                        {
                            CountryID = 169,
                            CountryName = "Syria",
                            ISOCode = "SY"
                        },
                        new
                        {
                            CountryID = 170,
                            CountryName = "Taiwan",
                            ISOCode = "TW"
                        },
                        new
                        {
                            CountryID = 171,
                            CountryName = "Tajikistan",
                            ISOCode = "TJ"
                        },
                        new
                        {
                            CountryID = 172,
                            CountryName = "Tanzania",
                            ISOCode = "TZ"
                        },
                        new
                        {
                            CountryID = 173,
                            CountryName = "Thailand",
                            ISOCode = "TH"
                        },
                        new
                        {
                            CountryID = 174,
                            CountryName = "Timor-Leste",
                            ISOCode = "TL"
                        },
                        new
                        {
                            CountryID = 175,
                            CountryName = "Togo",
                            ISOCode = "TG"
                        },
                        new
                        {
                            CountryID = 176,
                            CountryName = "Tonga",
                            ISOCode = "TO"
                        },
                        new
                        {
                            CountryID = 177,
                            CountryName = "Trinidad and Tobago",
                            ISOCode = "TT"
                        },
                        new
                        {
                            CountryID = 178,
                            CountryName = "Tunisia",
                            ISOCode = "TN"
                        },
                        new
                        {
                            CountryID = 179,
                            CountryName = "Turkey",
                            ISOCode = "TR"
                        },
                        new
                        {
                            CountryID = 180,
                            CountryName = "Turkmenistan",
                            ISOCode = "TM"
                        },
                        new
                        {
                            CountryID = 181,
                            CountryName = "Tuvalu",
                            ISOCode = "TV"
                        },
                        new
                        {
                            CountryID = 182,
                            CountryName = "Uganda",
                            ISOCode = "UG"
                        },
                        new
                        {
                            CountryID = 183,
                            CountryName = "Ukraine",
                            ISOCode = "UA"
                        },
                        new
                        {
                            CountryID = 184,
                            CountryName = "United Arab Emirates",
                            ISOCode = "AE"
                        },
                        new
                        {
                            CountryID = 185,
                            CountryName = "United Kingdom",
                            ISOCode = "GB"
                        },
                        new
                        {
                            CountryID = 186,
                            CountryName = "United States",
                            ISOCode = "US"
                        },
                        new
                        {
                            CountryID = 187,
                            CountryName = "Uruguay",
                            ISOCode = "UY"
                        },
                        new
                        {
                            CountryID = 188,
                            CountryName = "Uzbekistan",
                            ISOCode = "UZ"
                        },
                        new
                        {
                            CountryID = 189,
                            CountryName = "Vanuatu",
                            ISOCode = "VU"
                        },
                        new
                        {
                            CountryID = 190,
                            CountryName = "Vatican City",
                            ISOCode = "VA"
                        },
                        new
                        {
                            CountryID = 191,
                            CountryName = "Venezuela",
                            ISOCode = "VE"
                        },
                        new
                        {
                            CountryID = 192,
                            CountryName = "Vietnam",
                            ISOCode = "VN"
                        },
                        new
                        {
                            CountryID = 193,
                            CountryName = "Yemen",
                            ISOCode = "YE"
                        },
                        new
                        {
                            CountryID = 194,
                            CountryName = "Zambia",
                            ISOCode = "ZM"
                        },
                        new
                        {
                            CountryID = 195,
                            CountryName = "Zimbabwe",
                            ISOCode = "ZW"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"), 1L, 1);

                    b.Property<int?>("CountryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Deprecated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OriginalID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CustomerName", "CountryID")
                        .IsUnique()
                        .HasFilter("[CustomerName] IS NOT NULL AND [CountryID] IS NOT NULL");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoice", b =>
                {
                    b.Property<int>("CustomerInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInvoiceID"), 1L, 1);

                    b.Property<string>("CustomerInvoiceCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerInvoiceCode");

                    b.Property<decimal?>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceID");

                    b.HasIndex("CustomerInvoiceCode")
                        .IsUnique()
                        .HasFilter("[CustomerInvoiceCode] IS NOT NULL");

                    b.HasIndex("SaleID");

                    b.HasIndex("StatusID");

                    b.ToTable("CustomerInvoices", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoiceCost", b =>
                {
                    b.Property<int>("CustomerInvoiceCostsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceCostsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInvoiceCostsID"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostRegistryID")
                        .HasColumnType("int")
                        .HasColumnName("CostRegistryID");

                    b.Property<int?>("CustomerInvoiceID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceCostsID");

                    b.HasIndex("CostRegistryID");

                    b.HasIndex("CustomerInvoiceID");

                    b.ToTable("CustomerInvoiceCosts", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerDGV", b =>
                {
                    b.Property<int?>("CustomerDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowOriginalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerGroupSplit", b =>
                {
                    b.Property<int?>("CustomerGroupSplitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerGroupSplitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerGroupSplitID"), 1L, 1);

                    b.Property<int?>("Split1")
                        .HasColumnType("int");

                    b.Property<int?>("Split2")
                        .HasColumnType("int");

                    b.Property<int?>("Split3")
                        .HasColumnType("int");

                    b.Property<int?>("Split4")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerGroupSplitID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerGroupSplits", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerGroupSplitID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceCostDGV", b =>
                {
                    b.Property<int?>("CustomerInvoiceCostDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceCostDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerInvoiceCostDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceCostDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerInvoiceCostDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerInvoiceCostDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceDGV", b =>
                {
                    b.Property<int?>("CustomerInvoiceDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerInvoiceDGVID"), 1L, 1);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowInvoiceAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerInvoiceDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerInvoiceDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.FavouritePages", b =>
                {
                    b.Property<int?>("FavouritePageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavouritePageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FavouritePageID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("FavouritePageID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("FavouritePages", (string)null);

                    b.HasData(
                        new
                        {
                            FavouritePageID = 1,
                            Name = "Show Customer"
                        },
                        new
                        {
                            FavouritePageID = 2,
                            Name = "Show Customer Invoice"
                        },
                        new
                        {
                            FavouritePageID = 3,
                            Name = "Show Sale"
                        },
                        new
                        {
                            FavouritePageID = 4,
                            Name = "Show Supplier"
                        },
                        new
                        {
                            FavouritePageID = 5,
                            Name = "Show Supplier Invoice"
                        },
                        new
                        {
                            FavouritePageID = 6,
                            Name = "Show Supplier Invoice Cost"
                        },
                        new
                        {
                            FavouritePageID = 7,
                            Name = "Show Customer Invoice Cost"
                        },
                        new
                        {
                            FavouritePageID = 8,
                            Name = "Group Customer"
                        },
                        new
                        {
                            FavouritePageID = 9,
                            Name = "Create Customer"
                        },
                        new
                        {
                            FavouritePageID = 10,
                            Name = "Create Customer Invoice"
                        },
                        new
                        {
                            FavouritePageID = 11,
                            Name = "Create Customer Invoice Cost"
                        },
                        new
                        {
                            FavouritePageID = 12,
                            Name = "Create Supplier"
                        },
                        new
                        {
                            FavouritePageID = 13,
                            Name = "Create Supplier Invoice"
                        },
                        new
                        {
                            FavouritePageID = 14,
                            Name = "Create Supplier Invoice Cost"
                        },
                        new
                        {
                            FavouritePageID = 15,
                            Name = "Create Sale"
                        },
                        new
                        {
                            FavouritePageID = 16,
                            Name = "Create User"
                        },
                        new
                        {
                            FavouritePageID = 17,
                            Name = "Group Supplier"
                        },
                        new
                        {
                            FavouritePageID = 18,
                            Name = "Report Customer Invoice"
                        },
                        new
                        {
                            FavouritePageID = 19,
                            Name = "User Area"
                        },
                        new
                        {
                            FavouritePageID = 20,
                            Name = "Report Sale"
                        },
                        new
                        {
                            FavouritePageID = 21,
                            Name = "Report Supplier Invoice"
                        },
                        new
                        {
                            FavouritePageID = 22,
                            Name = "Show User"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SaleDGV", b =>
                {
                    b.Property<int?>("SaleDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaleDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SaleDGVID"), 1L, 1);

                    b.Property<bool?>("ShowBKNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowBoL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowCustomerCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowCustomerName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowTotalRevenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SaleDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SaleDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            SaleDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierDGV", b =>
                {
                    b.Property<int?>("SupplierDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowOriginalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierGroupSplit", b =>
                {
                    b.Property<int?>("SupplierGroupSplitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierGroupSplitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierGroupSplitID"), 1L, 1);

                    b.Property<int?>("Split1")
                        .HasColumnType("int");

                    b.Property<int?>("Split2")
                        .HasColumnType("int");

                    b.Property<int?>("Split3")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierGroupSplitID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierGroupSplits", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierGroupSplitID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceCostDGV", b =>
                {
                    b.Property<int?>("SupplierInvoiceCostDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceCostDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierInvoiceCostDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSupplierInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierInvoiceCostDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierInvoiceCostDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierInvoiceCostDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceDGV", b =>
                {
                    b.Property<int?>("SupplierInvoiceDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierInvoiceDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowInvoiceAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowInvoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowSupplierName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierInvoiceDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierInvoiceDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierInvoiceDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserDGV", b =>
                {
                    b.Property<int?>("UserDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserDGVID"), 1L, 1);

                    b.Property<bool?>("ShowEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowLastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowRoles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("UserDGVs", (string)null);

                    b.HasData(
                        new
                        {
                            UserDGVID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserFavouritePage", b =>
                {
                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("FavouritePageID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FavouritePageID");

                    b.HasIndex("FavouritePageID");

                    b.ToTable("UserFavouritePages", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            FavouritePageID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.RefreshToken", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TokenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenID"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshTokens", (string)null);

                    b.HasData(
                        new
                        {
                            TokenID = 1,
                            Created = new DateTime(2025, 3, 20, 14, 35, 42, 248, DateTimeKind.Local).AddTicks(8944),
                            Expires = new DateTime(2025, 3, 30, 14, 35, 42, 248, DateTimeKind.Local).AddTicks(8996),
                            Token = "BASEADMINTOKEN",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "CustomerRead"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "CustomerWrite"
                        },
                        new
                        {
                            RoleID = 4,
                            RoleName = "CustomerAdmin"
                        },
                        new
                        {
                            RoleID = 5,
                            RoleName = "CustomerInvoiceRead"
                        },
                        new
                        {
                            RoleID = 6,
                            RoleName = "CustomerInvoiceWrite"
                        },
                        new
                        {
                            RoleID = 7,
                            RoleName = "CustomerInvoiceAdmin"
                        },
                        new
                        {
                            RoleID = 8,
                            RoleName = "CustomerInvoiceCostRead"
                        },
                        new
                        {
                            RoleID = 9,
                            RoleName = "CustomerInvoiceCostWrite"
                        },
                        new
                        {
                            RoleID = 10,
                            RoleName = "CustomerInvoiceCostAdmin"
                        },
                        new
                        {
                            RoleID = 11,
                            RoleName = "SupplierRead"
                        },
                        new
                        {
                            RoleID = 12,
                            RoleName = "SupplierWrite"
                        },
                        new
                        {
                            RoleID = 13,
                            RoleName = "SupplierAdmin"
                        },
                        new
                        {
                            RoleID = 14,
                            RoleName = "SupplierInvoiceRead"
                        },
                        new
                        {
                            RoleID = 15,
                            RoleName = "SupplierInvoiceWrite"
                        },
                        new
                        {
                            RoleID = 16,
                            RoleName = "SupplierInvoiceAdmin"
                        },
                        new
                        {
                            RoleID = 17,
                            RoleName = "SupplierInvoiceCostRead"
                        },
                        new
                        {
                            RoleID = 18,
                            RoleName = "SupplierInvoiceCostWrite"
                        },
                        new
                        {
                            RoleID = 19,
                            RoleName = "SupplierInvoiceCostAdmin"
                        },
                        new
                        {
                            RoleID = 20,
                            RoleName = "SaleRead"
                        },
                        new
                        {
                            RoleID = 21,
                            RoleName = "SaleWrite"
                        },
                        new
                        {
                            RoleID = 22,
                            RoleName = "SaleAdmin"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"), 1L, 1);

                    b.Property<string>("BoLnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BoLNumber");

                    b.Property<string>("BookingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BookingNumber");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StatusID");

                    b.HasIndex("BoLnumber", "BookingNumber")
                        .IsUnique()
                        .HasFilter("[BoLNumber] IS NOT NULL AND [BookingNumber] IS NOT NULL");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("StatusID");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusName = "Active"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusName = "Closed"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusName = "Approved"
                        },
                        new
                        {
                            StatusID = 4,
                            StatusName = "Unapproved"
                        },
                        new
                        {
                            StatusID = 5,
                            StatusName = "Paid"
                        },
                        new
                        {
                            StatusID = 6,
                            StatusName = "Unpaid"
                        });
                });

            modelBuilder.Entity("API.Models.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<int?>("CountryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deprecated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OriginalID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplierID");

                    b.HasIndex("CountryID");

                    b.HasIndex("SupplierName", "CountryID")
                        .IsUnique()
                        .HasFilter("[SupplierName] IS NOT NULL AND [CountryID] IS NOT NULL");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoice", b =>
                {
                    b.Property<int>("SupplierInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierInvoiceID"), 1L, 1);

                    b.Property<decimal?>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierInvoiceCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SupplierInvoiceCode");

                    b.HasKey("SupplierInvoiceID");

                    b.HasIndex("SaleID");

                    b.HasIndex("StatusID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("SupplierInvoiceCode")
                        .IsUnique()
                        .HasFilter("[SupplierInvoiceCode] IS NOT NULL");

                    b.ToTable("SupplierInvoices", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoiceCost", b =>
                {
                    b.Property<int>("SupplierInvoiceCostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceCostsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierInvoiceCostsId"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostRegistryID")
                        .HasColumnType("int")
                        .HasColumnName("CostRegistryID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    b.HasKey("SupplierInvoiceCostsId");

                    b.HasIndex("CostRegistryID");

                    b.HasIndex("SupplierInvoiceId");

                    b.ToTable("SupplierInvoiceCosts", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("varbinary(MAX)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsUnicode(false)
                        .HasColumnType("varbinary(MAX)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "Admin",
                            LastName = "Admin",
                            Name = "Admin",
                            PasswordHash = new byte[] { 115, 99, 121, 33, 251, 228, 182, 244, 226, 19, 236, 198, 68, 236, 133, 37, 79, 115, 185, 68, 146, 249, 57, 2, 155, 70, 91, 59, 192, 229, 221, 48, 39, 239, 222, 133, 50, 226, 8, 10, 90, 251, 143, 163, 176, 200, 142, 252, 45, 37, 117, 117, 164, 22, 75, 31, 80, 104, 233, 157, 177, 112, 239, 40 },
                            PasswordSalt = new byte[] { 168, 43, 60, 32, 88, 171, 47, 210, 179, 226, 6, 17, 15, 40, 203, 210, 236, 150, 51, 40, 39, 169, 190, 237, 6, 183, 229, 137, 127, 188, 132, 159, 254, 118, 120, 111, 9, 174, 130, 199, 185, 44, 87, 88, 106, 19, 186, 16, 181, 203, 169, 12, 77, 186, 5, 87, 9, 240, 72, 64, 22, 84, 220, 221, 118, 149, 55, 66, 8, 163, 1, 90, 96, 154, 244, 26, 7, 17, 171, 60, 155, 135, 162, 57, 112, 34, 60, 192, 78, 239, 234, 180, 146, 157, 71, 45, 17, 14, 16, 225, 107, 240, 166, 243, 74, 197, 201, 166, 62, 131, 59, 7, 23, 98, 49, 161, 122, 17, 40, 74, 3, 62, 132, 253, 237, 3, 136, 236 }
                        });
                });

            modelBuilder.Entity("API.Models.Entities.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("API.Models.Procedures.ClassifySalesByProfit", b =>
                {
                    b.Property<string>("BoLNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("SaleMargins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Procedures.TotalAmountGainedPerCustomerInvoice", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerInvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalGained")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Procedures.TotalAmountSpentPerSupplierInvoice", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Procedures.TotalAmountSpentPerSuppliers", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<int?>("OriginalID")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmountInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Entities.Customer", b =>
                {
                    b.HasOne("API.Models.Entities.Country", "Country")
                        .WithMany("Customers")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("customer_country_fk");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoice", b =>
                {
                    b.HasOne("API.Models.Entities.Sale", "Sale")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("sale_CustomerInvoices_fk");

                    b.HasOne("API.Models.Entities.Status", "Status")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("status_CustomerInvoices_fk");

                    b.Navigation("Sale");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoiceCost", b =>
                {
                    b.HasOne("API.Models.Entities.CostRegistry", "CostRegistry")
                        .WithMany("CustomerInvoiceCosts")
                        .HasForeignKey("CostRegistryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("costRegistry_CustomerInvoiceCosts_fk");

                    b.HasOne("API.Models.Entities.CustomerInvoice", "CustomerInvoice")
                        .WithMany("CustomerInvoiceCosts")
                        .HasForeignKey("CustomerInvoiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CustomerInvoiceCosts_CustomerInvoices");

                    b.Navigation("CostRegistry");

                    b.Navigation("CustomerInvoice");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerDGV")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerDGV", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerGroupSplit", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerGroupSplit")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerGroupSplit", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceCostDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerInvoiceCostDGV")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerInvoiceCostDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerInvoiceDGV")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerInvoiceDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SaleDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SaleDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SaleDGV", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierDGV", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierGroupSplit", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierGroupSplit")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierGroupSplit", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceCostDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierInvoiceCostDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierInvoiceCostDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierInvoiceDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierInvoiceDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("UserDGV")
                        .HasForeignKey("API.Models.Entities.Preference.UserDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserFavouritePage", b =>
                {
                    b.HasOne("API.Models.Entities.Preference.FavouritePages", "FavouritePage")
                        .WithMany("UserFavourtitePages")
                        .HasForeignKey("FavouritePageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("UserFavouritePages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouritePage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Sale", b =>
                {
                    b.HasOne("API.Models.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("customer_sales_fk");

                    b.HasOne("API.Models.Entities.Status", "Status")
                        .WithMany("Sales")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("status_Sales_fk");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Models.Entities.Supplier", b =>
                {
                    b.HasOne("API.Models.Entities.Country", "Country")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("supplier_country_fk");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoice", b =>
                {
                    b.HasOne("API.Models.Entities.Sale", "Sale")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("sale_supplierInvoices_fk");

                    b.HasOne("API.Models.Entities.Status", "Status")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("status_supplierInvoices_fk");

                    b.HasOne("API.Models.Entities.Supplier", "Supplier")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("supplier_supplierInvoices_fk");

                    b.Navigation("Sale");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoiceCost", b =>
                {
                    b.HasOne("API.Models.Entities.CostRegistry", "CostRegistry")
                        .WithMany("SupplierInvoiceCosts")
                        .HasForeignKey("CostRegistryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("costRegistry_SupplierInvoiceCosts_fk");

                    b.HasOne("API.Models.Entities.SupplierInvoice", "SupplierInvoice")
                        .WithMany("SupplierInvoiceCosts")
                        .HasForeignKey("SupplierInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SupplierInvoiceID_SupplierInvoiceCosts_fk");

                    b.Navigation("CostRegistry");

                    b.Navigation("SupplierInvoice");
                });

            modelBuilder.Entity("API.Models.Entities.UserRole", b =>
                {
                    b.HasOne("API.Models.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.CostRegistry", b =>
                {
                    b.Navigation("CustomerInvoiceCosts");

                    b.Navigation("SupplierInvoiceCosts");
                });

            modelBuilder.Entity("API.Models.Entities.Country", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("API.Models.Entities.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoice", b =>
                {
                    b.Navigation("CustomerInvoiceCosts");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.FavouritePages", b =>
                {
                    b.Navigation("UserFavourtitePages");
                });

            modelBuilder.Entity("API.Models.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Models.Entities.Sale", b =>
                {
                    b.Navigation("CustomerInvoices");

                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("API.Models.Entities.Status", b =>
                {
                    b.Navigation("CustomerInvoices");

                    b.Navigation("Sales");

                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("API.Models.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoice", b =>
                {
                    b.Navigation("SupplierInvoiceCosts");
                });

            modelBuilder.Entity("API.Models.Entities.User", b =>
                {
                    b.Navigation("CustomerDGV")
                        .IsRequired();

                    b.Navigation("CustomerGroupSplit")
                        .IsRequired();

                    b.Navigation("CustomerInvoiceCostDGV")
                        .IsRequired();

                    b.Navigation("CustomerInvoiceDGV")
                        .IsRequired();

                    b.Navigation("RefreshTokens");

                    b.Navigation("SaleDGV")
                        .IsRequired();

                    b.Navigation("SupplierDGV")
                        .IsRequired();

                    b.Navigation("SupplierGroupSplit")
                        .IsRequired();

                    b.Navigation("SupplierInvoiceCostDGV")
                        .IsRequired();

                    b.Navigation("SupplierInvoiceDGV")
                        .IsRequired();

                    b.Navigation("UserDGV")
                        .IsRequired();

                    b.Navigation("UserFavouritePages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
