// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(Progetto_FormativoContext))]
    [Migration("20250319144159_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Entities.CostRegistry", b =>
                {
                    b.Property<int>("CostRegistryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CostRegistryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostRegistryID"), 1L, 1);

                    b.Property<string>("CostRegistryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostRegistryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostRegistryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CostRegistryUniqueCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CostRegistryID");

                    b.ToTable("CostRegistries", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ISOCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CountryID");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.HasIndex("ISOCode")
                        .IsUnique();

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"), 1L, 1);

                    b.Property<int?>("CountryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Deprecated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OriginalID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CustomerName", "CountryID")
                        .IsUnique()
                        .HasFilter("[CustomerName] IS NOT NULL AND [CountryID] IS NOT NULL");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoice", b =>
                {
                    b.Property<int>("CustomerInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInvoiceID"), 1L, 1);

                    b.Property<decimal?>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceID");

                    b.HasIndex("SaleID");

                    b.HasIndex("StatusID");

                    b.ToTable("CustomerInvoices", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoiceCost", b =>
                {
                    b.Property<int>("CustomerInvoiceCostsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceCostsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInvoiceCostsID"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostRegistryID")
                        .HasColumnType("int")
                        .HasColumnName("CostRegistryID");

                    b.Property<int?>("CustomerInvoiceID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceCostsID");

                    b.HasIndex("CostRegistryID");

                    b.HasIndex("CustomerInvoiceID");

                    b.ToTable("CustomerInvoiceCosts", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerDGV", b =>
                {
                    b.Property<int?>("CustomerDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowOriginalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerGroupSplit", b =>
                {
                    b.Property<int?>("CustomerGroupSplitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerGroupSplitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerGroupSplitID"), 1L, 1);

                    b.Property<int?>("Split1")
                        .HasColumnType("int");

                    b.Property<int?>("Split2")
                        .HasColumnType("int");

                    b.Property<int?>("Split3")
                        .HasColumnType("int");

                    b.Property<int?>("Split4")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerGroupSplitID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerGroupSplits", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceCostDGV", b =>
                {
                    b.Property<int?>("CustomerInvoiceCostDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceCostDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerInvoiceCostDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceCostDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerInvoiceCostDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceDGV", b =>
                {
                    b.Property<int?>("CustomerInvoiceDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerInvoiceDGVID"), 1L, 1);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowInvoiceAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoiceDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("CustomerInvoiceDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.FavouritePages", b =>
                {
                    b.Property<int?>("FavouritePageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavouritePageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FavouritePageID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("FavouritePageID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("FavouritePages", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SaleDGV", b =>
                {
                    b.Property<int?>("SaleDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaleDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SaleDGVID"), 1L, 1);

                    b.Property<bool?>("ShowBKNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowBoL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowCustomerCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowCustomerName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowTotalRevenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SaleDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SaleDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierDGV", b =>
                {
                    b.Property<int?>("SupplierDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowOriginalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierGroupSplit", b =>
                {
                    b.Property<int?>("SupplierGroupSplitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierGroupSplitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierGroupSplitID"), 1L, 1);

                    b.Property<int?>("Split1")
                        .HasColumnType("int");

                    b.Property<int?>("Split2")
                        .HasColumnType("int");

                    b.Property<int?>("Split3")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierGroupSplitID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierGroupSplits", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceCostDGV", b =>
                {
                    b.Property<int?>("SupplierInvoiceCostDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceCostDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierInvoiceCostDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSupplierInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierInvoiceCostDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierInvoiceCostDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceDGV", b =>
                {
                    b.Property<int?>("SupplierInvoiceDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierInvoiceDGVID"), 1L, 1);

                    b.Property<bool?>("ShowCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowInvoiceAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowInvoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowSupplierName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SupplierInvoiceDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("SupplierInvoiceDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserDGV", b =>
                {
                    b.Property<int?>("UserDGVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserDGVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserDGVID"), 1L, 1);

                    b.Property<bool?>("ShowEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowLastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowRoles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserDGVID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("UserDGVs", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserFavouritePage", b =>
                {
                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("FavouritePageID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FavouritePageID");

                    b.HasIndex("FavouritePageID");

                    b.ToTable("UserFavouritePages", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.RefreshToken", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TokenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenID"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"), 1L, 1);

                    b.Property<string>("BoLnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BoLNumber");

                    b.Property<string>("BookingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BookingNumber");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StatusID");

                    b.HasIndex("BoLnumber", "BookingNumber")
                        .IsUnique()
                        .HasFilter("[BoLNumber] IS NOT NULL AND [BookingNumber] IS NOT NULL");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("StatusID");

                    b.ToTable("Statuses", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<int?>("CountryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deprecated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OriginalID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplierID");

                    b.HasIndex("CountryID");

                    b.HasIndex("SupplierName", "CountryID")
                        .IsUnique()
                        .HasFilter("[SupplierName] IS NOT NULL AND [CountryID] IS NOT NULL");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoice", b =>
                {
                    b.Property<int>("SupplierInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierInvoiceID"), 1L, 1);

                    b.Property<decimal?>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("SupplierInvoiceID");

                    b.HasIndex("SaleID");

                    b.HasIndex("StatusID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SupplierInvoices", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoiceCost", b =>
                {
                    b.Property<int>("SupplierInvoiceCostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceCostsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierInvoiceCostsId"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostRegistryID")
                        .HasColumnType("int")
                        .HasColumnName("CostRegistryID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    b.HasKey("SupplierInvoiceCostsId");

                    b.HasIndex("CostRegistryID");

                    b.HasIndex("SupplierInvoiceId");

                    b.ToTable("SupplierInvoiceCosts", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("varbinary(MAX)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsUnicode(false)
                        .HasColumnType("varbinary(MAX)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("API.Models.Procedures.ClassifySalesByProfit", b =>
                {
                    b.Property<string>("BoLNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("SaleMargins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Procedures.TotalAmountGainedPerCustomerInvoice", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerInvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalGained")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Procedures.TotalAmountSpentPerSupplierInvoice", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Procedures.TotalAmountSpentPerSuppliers", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<int?>("OriginalID")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmountInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.ToView(null);
                });

            modelBuilder.Entity("API.Models.Entities.Customer", b =>
                {
                    b.HasOne("API.Models.Entities.Country", "Country")
                        .WithMany("Customers")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("customer_country_fk");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoice", b =>
                {
                    b.HasOne("API.Models.Entities.Sale", "Sale")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("sale_CustomerInvoices_fk");

                    b.HasOne("API.Models.Entities.Status", "Status")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("status_CustomerInvoices_fk");

                    b.Navigation("Sale");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoiceCost", b =>
                {
                    b.HasOne("API.Models.Entities.CostRegistry", "CostRegistry")
                        .WithMany("CustomerInvoiceCosts")
                        .HasForeignKey("CostRegistryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("costRegistry_CustomerInvoiceCosts_fk");

                    b.HasOne("API.Models.Entities.CustomerInvoice", "CustomerInvoice")
                        .WithMany("CustomerInvoiceCosts")
                        .HasForeignKey("CustomerInvoiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CustomerInvoiceCosts_CustomerInvoices");

                    b.Navigation("CostRegistry");

                    b.Navigation("CustomerInvoice");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerDGV")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerDGV", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerGroupSplit", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerGroupSplit")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerGroupSplit", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceCostDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerInvoiceCostDGV")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerInvoiceCostDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.CustomerInvoiceDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("CustomerInvoiceDGV")
                        .HasForeignKey("API.Models.Entities.Preference.CustomerInvoiceDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SaleDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SaleDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SaleDGV", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierDGV", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierGroupSplit", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierGroupSplit")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierGroupSplit", "UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceCostDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierInvoiceCostDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierInvoiceCostDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.SupplierInvoiceDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("SupplierInvoiceDGV")
                        .HasForeignKey("API.Models.Entities.Preference.SupplierInvoiceDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserDGV", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithOne("UserDGV")
                        .HasForeignKey("API.Models.Entities.Preference.UserDGV", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.UserFavouritePage", b =>
                {
                    b.HasOne("API.Models.Entities.Preference.FavouritePages", "FavouritePage")
                        .WithMany("UserFavourtitePages")
                        .HasForeignKey("FavouritePageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("UserFavouritePages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouritePage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Sale", b =>
                {
                    b.HasOne("API.Models.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("customer_sales_fk");

                    b.HasOne("API.Models.Entities.Status", "Status")
                        .WithMany("Sales")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("status_Sales_fk");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Models.Entities.Supplier", b =>
                {
                    b.HasOne("API.Models.Entities.Country", "Country")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("supplier_country_fk");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoice", b =>
                {
                    b.HasOne("API.Models.Entities.Sale", "Sale")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("sale_supplierInvoices_fk");

                    b.HasOne("API.Models.Entities.Status", "Status")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("status_supplierInvoices_fk");

                    b.HasOne("API.Models.Entities.Supplier", "Supplier")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("supplier_supplierInvoices_fk");

                    b.Navigation("Sale");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoiceCost", b =>
                {
                    b.HasOne("API.Models.Entities.CostRegistry", "CostRegistry")
                        .WithMany("SupplierInvoiceCosts")
                        .HasForeignKey("CostRegistryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("costRegistry_SupplierInvoiceCosts_fk");

                    b.HasOne("API.Models.Entities.SupplierInvoice", "SupplierInvoice")
                        .WithMany("SupplierInvoiceCosts")
                        .HasForeignKey("SupplierInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SupplierInvoiceID_SupplierInvoiceCosts_fk");

                    b.Navigation("CostRegistry");

                    b.Navigation("SupplierInvoice");
                });

            modelBuilder.Entity("API.Models.Entities.UserRole", b =>
                {
                    b.HasOne("API.Models.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.CostRegistry", b =>
                {
                    b.Navigation("CustomerInvoiceCosts");

                    b.Navigation("SupplierInvoiceCosts");
                });

            modelBuilder.Entity("API.Models.Entities.Country", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("API.Models.Entities.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("API.Models.Entities.CustomerInvoice", b =>
                {
                    b.Navigation("CustomerInvoiceCosts");
                });

            modelBuilder.Entity("API.Models.Entities.Preference.FavouritePages", b =>
                {
                    b.Navigation("UserFavourtitePages");
                });

            modelBuilder.Entity("API.Models.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Models.Entities.Sale", b =>
                {
                    b.Navigation("CustomerInvoices");

                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("API.Models.Entities.Status", b =>
                {
                    b.Navigation("CustomerInvoices");

                    b.Navigation("Sales");

                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("API.Models.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("API.Models.Entities.SupplierInvoice", b =>
                {
                    b.Navigation("SupplierInvoiceCosts");
                });

            modelBuilder.Entity("API.Models.Entities.User", b =>
                {
                    b.Navigation("CustomerDGV")
                        .IsRequired();

                    b.Navigation("CustomerGroupSplit")
                        .IsRequired();

                    b.Navigation("CustomerInvoiceCostDGV")
                        .IsRequired();

                    b.Navigation("CustomerInvoiceDGV")
                        .IsRequired();

                    b.Navigation("RefreshTokens");

                    b.Navigation("SaleDGV")
                        .IsRequired();

                    b.Navigation("SupplierDGV")
                        .IsRequired();

                    b.Navigation("SupplierGroupSplit")
                        .IsRequired();

                    b.Navigation("SupplierInvoiceCostDGV")
                        .IsRequired();

                    b.Navigation("SupplierInvoiceDGV")
                        .IsRequired();

                    b.Navigation("UserDGV")
                        .IsRequired();

                    b.Navigation("UserFavouritePages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
