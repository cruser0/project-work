-- Delete all records from each table
DELETE FROM CustomerInvoiceCosts;
DELETE FROM SupplierInvoiceCosts;
DELETE FROM CustomerInvoices;
DELETE FROM SupplierInvoices;
DELETE FROM Sales;
DELETE FROM Suppliers;
DELETE FROM Customers;

-- Reset identity for each table
DBCC CHECKIDENT ('Customers', RESEED, 0);
DBCC CHECKIDENT ('Suppliers', RESEED, 0);
DBCC CHECKIDENT ('Sales', RESEED, 0);
DBCC CHECKIDENT ('CustomerInvoices', RESEED, 0);
DBCC CHECKIDENT ('SupplierInvoices', RESEED, 0);
DBCC CHECKIDENT ('CustomerInvoiceCosts', RESEED, 0);
DBCC CHECKIDENT ('SupplierInvoiceCosts', RESEED, 0);

-- Insert 2,500 records into Customers table with more realistic distribution
INSERT INTO Customers (CustomerName, Country, Deprecated, CreatedAt, OriginalID)
SELECT TOP 2500
    CONCAT('Customer', ROW_NUMBER() OVER (ORDER BY (SELECT NULL))), 
    CASE 
        -- More realistic country distribution for shipping customers
        WHEN v < 20 THEN 'China'       -- 20% Chinese customers
        WHEN v < 35 THEN 'USA'         -- 15% US customers
        WHEN v < 45 THEN 'Germany'     -- 10% German customers
        WHEN v < 55 THEN 'UK'          -- 10% UK customers
        WHEN v < 62 THEN 'Netherlands' -- 7% Dutch customers (major shipping hub)
        WHEN v < 69 THEN 'Singapore'   -- 7% Singapore customers (major shipping hub)
        WHEN v < 76 THEN 'UAE'         -- 7% UAE customers (Dubai port)
        WHEN v < 82 THEN 'South Korea' -- 6% South Korean customers
        WHEN v < 88 THEN 'Japan'       -- 6% Japanese customers
        WHEN v < 92 THEN 'India'       -- 4% Indian customers
        WHEN v < 95 THEN 'Brazil'      -- 3% Brazilian customers
        WHEN v < 97 THEN 'South Africa'-- 2% South African customers
        WHEN v < 99 THEN 'Australia'   -- 2% Australian customers
        ELSE 'Canada'                  -- 1% Canadian customers
    END,
    -- About 5% of customers are deprecated
    CASE WHEN (ABS(CHECKSUM(NEWID())) % 100) < 5 THEN 1 ELSE 0 END,
    -- Customer creation follows business cycles with peak seasons
    DATEADD(DAY, 
        CASE 
            -- Q1: Post-holiday shipping needs (Jan-Mar) - 30% of customers
            WHEN v < 30 THEN (ABS(CHECKSUM(NEWID())) % 90)
            -- Q2: Pre-summer shipping needs (Apr-Jun) - 25% of customers
            WHEN v < 55 THEN 90 + (ABS(CHECKSUM(NEWID())) % 91)
            -- Q3: Peak shipping season (Jul-Sep) - 35% of customers
            WHEN v < 90 THEN 181 + (ABS(CHECKSUM(NEWID())) % 92)
            -- Q4: Holiday shipping rush (Oct-Dec) - 10% of customers
            ELSE 273 + (ABS(CHECKSUM(NEWID())) % 92)
        END,
        '2024-01-01'),
    ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
FROM (
    SELECT ABS(CHECKSUM(NEWID())) % 100 AS v
    FROM master.dbo.spt_values
) AS subquery;

-- Insert 2,500 records into Suppliers table with realistic distribution
INSERT INTO Suppliers (SupplierName, Country, Deprecated, CreatedAt, OriginalID)
SELECT TOP 2500
    CONCAT('Supplier', ROW_NUMBER() OVER (ORDER BY (SELECT NULL))), 
    CASE 
        -- Realistic supplier distribution for shipping industry
        WHEN v < 18 THEN 'China'         -- 18% Chinese suppliers (shipyards, equipment)
        WHEN v < 2500 THEN 'South Korea'   -- 15% South Korean suppliers (shipbuilding)
        WHEN v < 48 THEN 'Japan'         -- 15% Japanese suppliers (maritime equipment)
        WHEN v < 60 THEN 'Germany'       -- 12% German suppliers (engineering, logistics)
        WHEN v < 70 THEN 'Netherlands'   -- 10% Dutch suppliers (port services)
        WHEN v < 80 THEN 'Singapore'     -- 10% Singapore suppliers (bunkering, logistics)
        WHEN v < 87 THEN 'USA'           -- 7% US suppliers (technology, equipment)
        WHEN v < 92 THEN 'UK'            -- 5% UK suppliers (insurance, services)
        WHEN v < 96 THEN 'Norway'        -- 4% Norwegian suppliers (maritime specialists)
        WHEN v < 98 THEN 'Denmark'       -- 2% Danish suppliers (Maersk related)
        ELSE 'Greece'                    -- 2% Greek suppliers (traditional shipping)
    END,
    -- About 3% of suppliers are deprecated
    CASE WHEN (ABS(CHECKSUM(NEWID())) % 100) < 3 THEN 1 ELSE 0 END,
    -- Even distribution of suppliers throughout the year
    DATEADD(DAY, 
        (ABS(CHECKSUM(NEWID())) % 365),
        '2024-01-01'),
    ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
FROM (
    SELECT ABS(CHECKSUM(NEWID())) % 100 AS v
    FROM master.dbo.spt_values
) AS subquery;

-- Insert 2,500 records into Sales table with realistic shipping patterns
INSERT INTO Sales (BookingNumber, BoLNumber, SaleDate, CustomerID, TotalRevenue, Status)
SELECT TOP 2500
    -- More realistic booking number format for shipping
    'BKG-' + SUBSTRING(CONVERT(VARCHAR(36), NEWID()), 1, 8),
    -- Bill of Lading number format
    'BOL-' + SUBSTRING(CONVERT(VARCHAR(36), NEWID()), 1, 8),
    DATEADD(DAY, 
        CASE 
            -- Realistic shipping seasonal patterns
            -- Pre-Chinese New Year rush (January)
            WHEN MONTH(d) = 1 THEN
                (ABS(CHECKSUM(NEWID())) % 31)
            -- Post-Chinese New Year lull (February)
            WHEN MONTH(d) = 2 THEN
                31 + (ABS(CHECKSUM(NEWID())) % 28)
            -- March recovery
            WHEN MONTH(d) = 3 THEN
                59 + (ABS(CHECKSUM(NEWID())) % 31)
            -- Spring steady shipping (April)
            WHEN MONTH(d) = 4 THEN
                90 + (ABS(CHECKSUM(NEWID())) % 30)
            -- May increase (pre-summer)
            WHEN MONTH(d) = 5 THEN
                120 + (ABS(CHECKSUM(NEWID())) % 31)
            -- June preparation for peak season
            WHEN MONTH(d) = 6 THEN
                151 + (ABS(CHECKSUM(NEWID())) % 30)
            -- Peak season starts (July)
            WHEN MONTH(d) = 7 THEN
                181 + (ABS(CHECKSUM(NEWID())) % 31)
            -- Peak season highest (August)
            WHEN MONTH(d) = 8 THEN
                212 + (ABS(CHECKSUM(NEWID())) % 31)
            -- Peak continues (September)
            WHEN MONTH(d) = 9 THEN
                243 + (ABS(CHECKSUM(NEWID())) % 30)
            -- Golden Week disruption & holiday prep (October)
            WHEN MONTH(d) = 10 THEN
                273 + (ABS(CHECKSUM(NEWID())) % 31)
            -- Pre-holiday rush (November)
            WHEN MONTH(d) = 11 THEN
                304 + (ABS(CHECKSUM(NEWID())) % 30)
            -- Holiday shipping peak (December)
            ELSE
                334 + (ABS(CHECKSUM(NEWID())) % 31)
        END,
        '2024-01-01'),
    -- More realistic customer distribution (some customers use services more)
    CASE 
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 30 THEN 
            -- 30% of sales go to top 10% customers (high-volume shippers)
            (ABS(CHECKSUM(NEWID())) % 250) + 1
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 70 THEN 
            -- 40% of sales go to next 30% customers (medium-volume)
            (ABS(CHECKSUM(NEWID())) % 750) + 251
        ELSE 
            -- 30% of sales distributed among remaining 60% customers (occasional shippers)
            (ABS(CHECKSUM(NEWID())) % 1500) + 1001
    END,
    0, -- Initialize TotalRevenue to 0 (updated later)
    -- Status distribution (Active/Closed instead of Pending/Completed)
    CASE 
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 15 THEN 'Active'
        ELSE 'Closed'
    END
FROM (
    SELECT DATEADD(DAY, (ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) % 365), '2024-01-01') AS d
    FROM master.dbo.spt_values
) AS dates;

-- Insert 2,500 records into CustomerInvoices with realistic patterns
INSERT INTO CustomerInvoices (SaleID, InvoiceAmount, InvoiceDate, Status)
SELECT TOP 2500
    s.SaleID,
    0, -- Initialize InvoiceAmount to 0 (updated later)
    -- Invoice date is typically 1-14 days after sale for shipping
    DATEADD(DAY, 
        CASE
            -- Faster invoicing for high-priority or rush shipments
            WHEN (ABS(CHECKSUM(NEWID())) % 100) < 20 THEN
                (ABS(CHECKSUM(NEWID())) % 3) + 1 -- 1-3 days for 20% of shipments
            -- Standard invoicing time
            WHEN (ABS(CHECKSUM(NEWID())) % 100) < 80 THEN
                (ABS(CHECKSUM(NEWID())) % 5) + 4 -- 4-8 days for 60% of shipments
            -- Delayed invoicing (complex shipments, documentation issues)
            ELSE
                (ABS(CHECKSUM(NEWID())) % 6) + 9 -- 9-14 days for 20% of shipments
        END,
        s.SaleDate),
    -- Status: Paid/Unpaid with realistic distribution
    CASE 
        -- 85% paid, 15% unpaid
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 85 THEN 'Paid'
        ELSE 'Unpaid'
    END
FROM Sales s
ORDER BY NEWID();

-- Insert 2,500 records into SupplierInvoices with realistic patterns
INSERT INTO SupplierInvoices (SaleID, SupplierID, InvoiceAmount, InvoiceDate, Status)
SELECT TOP 2500
    s.SaleID,
    -- More realistic supplier distribution
    -- Some suppliers (port operators, fuel suppliers) handle more business
    CASE 
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 40 THEN 
            -- 40% of invoices go to top 15% suppliers (major service providers)
            (ABS(CHECKSUM(NEWID())) % 375) + 1
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 80 THEN 
            -- 40% of invoices go to next 35% suppliers (regular service providers)
            (ABS(CHECKSUM(NEWID())) % 875) + 376
        ELSE 
            -- 20% of invoices distributed to remaining 50% suppliers (occasional)
            (ABS(CHECKSUM(NEWID())) % 1250) + 1251
    END,
    0, -- Initialize InvoiceAmount to 0 (updated later)
    -- Supplier invoices happen based on service type
    DATEADD(DAY, 
        CASE 
            -- Immediate services (pilotage, tug assistance)
            WHEN (ABS(CHECKSUM(NEWID())) % 100) < 30 THEN
                (ABS(CHECKSUM(NEWID())) % 3) -- 0-2 days
            -- Standard services (stevedoring, port charges)
            WHEN (ABS(CHECKSUM(NEWID())) % 100) < 80 THEN
                (ABS(CHECKSUM(NEWID())) % 5) + 3 -- 3-7 days
            -- Delayed services (repairs, equipment rental)
            ELSE
                (ABS(CHECKSUM(NEWID())) % 14) + 8 -- 8-21 days
        END,
        s.SaleDate),
    -- Status: Approved/Unapproved
    CASE 
        -- 80% approved, 20% unapproved
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 80 THEN 'Approved'
        ELSE 'Unapproved'
    END
FROM Sales s
ORDER BY NEWID();

-- Insert records into CustomerInvoiceCosts with realistic shipping cost items
INSERT INTO CustomerInvoiceCosts (CustomerInvoiceID, Cost, Quantity, Name)
SELECT TOP 2500
    (ABS(CHECKSUM(NEWID())) % 2500) + 1,
    -- More realistic costs with seasonal patterns and destination-based variations
    CASE 
        -- Peak shipping season (July-August)
        WHEN MONTH(ci.InvoiceDate) IN (7, 8) THEN 
            -- High season rates
            CASE 
                WHEN c.Country IN ('China', 'Singapore', 'South Korea', 'Japan') THEN
                    -- Asia routes
                    (ABS(CHECKSUM(NEWID())) % 2000) + 2500 -- $2500-$4500
                WHEN c.Country IN ('USA', 'Canada') THEN
                    -- Transpacific
                    (ABS(CHECKSUM(NEWID())) % 3000) + 3500 -- $3500-$6500
                WHEN c.Country IN ('Germany', 'UK', 'Netherlands') THEN
                    -- Europe routes
                    (ABS(CHECKSUM(NEWID())) % 2500) + 3000 -- $3000-$5500
                ELSE
                    -- Other routes
                    (ABS(CHECKSUM(NEWID())) % 2000) + 2800 -- $2800-$4800
            END
        -- Pre-Christmas rush (September-December)
        WHEN MONTH(ci.InvoiceDate) BETWEEN 9 AND 12 THEN
            -- Holiday season
            CASE 
                WHEN c.Country IN ('China', 'Singapore', 'South Korea', 'Japan') THEN
                    -- Asia routes during holiday season
                    (ABS(CHECKSUM(NEWID())) % 1800) + 2300 -- $2300-$4100
                WHEN c.Country IN ('USA', 'Canada') THEN
                    -- Transpacific holiday routes
                    (ABS(CHECKSUM(NEWID())) % 2800) + 3200 -- $3200-$6000
                WHEN c.Country IN ('Germany', 'UK', 'Netherlands') THEN
                    -- Europe holiday routes
                    (ABS(CHECKSUM(NEWID())) % 2300) + 2800 -- $2800-$5100
                ELSE
                    -- Other holiday routes
                    (ABS(CHECKSUM(NEWID())) % 1800) + 2600 -- $2600-$4400
            END
        -- Chinese New Year effect (January-February)
        WHEN MONTH(ci.InvoiceDate) IN (1, 2) THEN
            -- CNY effect
            CASE 
                WHEN c.Country IN ('China', 'Singapore', 'South Korea', 'Japan') THEN
                    -- Asia routes during CNY
                    (ABS(CHECKSUM(NEWID())) % 2200) + 2800 -- $2800-$5000
                WHEN c.Country IN ('USA', 'Canada') THEN
                    -- Transpacific CNY routes
                    (ABS(CHECKSUM(NEWID())) % 2500) + 3000 -- $3000-$5500
                WHEN c.Country IN ('Germany', 'UK', 'Netherlands') THEN
                    -- Europe CNY routes
                    (ABS(CHECKSUM(NEWID())) % 2100) + 2900 -- $2900-$5000
                ELSE
                    -- Other CNY routes
                    (ABS(CHECKSUM(NEWID())) % 1900) + 2500 -- $2500-$4400
            END
        -- Low season (March-June)
        ELSE 
            -- Low season rates
            CASE 
                WHEN c.Country IN ('China', 'Singapore', 'South Korea', 'Japan') THEN
                    -- Asia routes during low season
                    (ABS(CHECKSUM(NEWID())) % 1200) + 1800 -- $1800-$3000
                WHEN c.Country IN ('USA', 'Canada') THEN
                    -- Transpacific low season
                    (ABS(CHECKSUM(NEWID())) % 1800) + 2200 -- $2200-$4000
                WHEN c.Country IN ('Germany', 'UK', 'Netherlands') THEN
                    -- Europe low season
                    (ABS(CHECKSUM(NEWID())) % 1500) + 2000 -- $2000-$3500
                ELSE
                    -- Other low season
                    (ABS(CHECKSUM(NEWID())) % 1400) + 1900 -- $1900-$250000
            END
    END,
    -- Quantity represents number of containers or shipping units
    CASE
        -- Most shipments are small (1-3 units)
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 70 THEN 
            (ABS(CHECKSUM(NEWID())) % 3) + 1 -- 1-3 units (70% of shipments)
        -- Medium shipments (4-10 units)
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 95 THEN 
            (ABS(CHECKSUM(NEWID())) % 7) + 4 -- 4-10 units (25% of shipments)
        -- Large shipments (11-20 units)
        ELSE 
            (ABS(CHECKSUM(NEWID())) % 10) + 11 -- 11-20 units (5% of shipments)
    END,
    -- Realistic shipping service names
    CASE (ABS(CHECKSUM(NEWID())) % 15)
        WHEN 0 THEN 'Ocean Freight FCL'
        WHEN 1 THEN 'Ocean Freight LCL'
        WHEN 2 THEN 'Air Freight'
        WHEN 3 THEN 'Terminal Handling'
        WHEN 4 THEN 'Customs Clearance'
        WHEN 5 THEN 'Documentation Fee'
        WHEN 6 THEN 'Container Detention'
        WHEN 7 THEN 'Warehousing'
        WHEN 8 THEN 'Insurance'
        WHEN 9 THEN 'Last Mile Delivery'
        WHEN 10 THEN 'Express Service'
        WHEN 11 THEN 'Dangerous Goods Handling'
        WHEN 12 THEN 'Refrigerated Cargo'
        WHEN 13 THEN 'Port Congestion Surcharge'
        ELSE 'Fuel Adjustment Factor'
    END
FROM CustomerInvoices ci
JOIN Sales s ON ci.SaleID = s.SaleID
JOIN Customers c ON s.CustomerID = c.CustomerID
ORDER BY NEWID();

-- Insert records into SupplierInvoiceCosts with realistic supplier cost items
INSERT INTO SupplierInvoiceCosts (SupplierInvoiceID, Cost, Quantity, Name)
SELECT TOP 2500
    (ABS(CHECKSUM(NEWID())) % 2500) + 1,
    -- Supplier costs follow similar patterns but at lower margins
    CASE 
        -- Peak shipping season (July-August)
        WHEN MONTH(si.InvoiceDate) IN (7, 8) THEN 
            -- High season costs
            CASE
                WHEN sup.Country IN ('China', 'South Korea', 'Japan') THEN
                    -- Asian suppliers (shipyards, equipment)
                    (ABS(CHECKSUM(NEWID())) % 1600) + 2000 -- $2000-$3600
                WHEN sup.Country IN ('Germany', 'Netherlands', 'Norway') THEN
                    -- European maritime suppliers
                    (ABS(CHECKSUM(NEWID())) % 1800) + 2200 -- $2200-$4000
                WHEN sup.Country IN ('Singapore', 'UAE') THEN
                    -- Bunkering and port services
                    (ABS(CHECKSUM(NEWID())) % 1500) + 1800 -- $1800-$250000
                ELSE
                    -- Other suppliers
                    (ABS(CHECKSUM(NEWID())) % 1400) + 1600 -- $1600-$3000
            END
        -- Pre-Christmas rush (September-December)
        WHEN MONTH(si.InvoiceDate) BETWEEN 9 AND 12 THEN
            -- Holiday season supplier costs
            CASE
                WHEN sup.Country IN ('China', 'South Korea', 'Japan') THEN
                    -- Asian suppliers holiday season
                    (ABS(CHECKSUM(NEWID())) % 1500) + 1900 -- $1900-$3400
                WHEN sup.Country IN ('Germany', 'Netherlands', 'Norway') THEN
                    -- European suppliers holiday season
                    (ABS(CHECKSUM(NEWID())) % 1700) + 2100 -- $2100-$3800
                WHEN sup.Country IN ('Singapore', 'UAE') THEN
                    -- Bunkering holiday season
                    (ABS(CHECKSUM(NEWID())) % 1400) + 1700 -- $1700-$3100
                ELSE
                    -- Other suppliers holiday season
                    (ABS(CHECKSUM(NEWID())) % 1300) + 1500 -- $1500-$2800
            END
        -- Chinese New Year effect (January-February)
        WHEN MONTH(si.InvoiceDate) IN (1, 2) THEN
            -- CNY effect on supplier costs
            CASE
                WHEN sup.Country IN ('China', 'South Korea', 'Japan') THEN
                    -- Asian suppliers during CNY
                    (ABS(CHECKSUM(NEWID())) % 1700) + 2200 -- $2200-$3900
                WHEN sup.Country IN ('Germany', 'Netherlands', 'Norway') THEN
                    -- European suppliers during CNY
                    (ABS(CHECKSUM(NEWID())) % 1600) + 2000 -- $2000-$3600
                WHEN sup.Country IN ('Singapore', 'UAE') THEN
                    -- Bunkering during CNY
                    (ABS(CHECKSUM(NEWID())) % 1500) + 1900 -- $1900-$3400
                ELSE
                    -- Other suppliers during CNY
                    (ABS(CHECKSUM(NEWID())) % 1300) + 1700 -- $1700-$3000
            END
        -- Low season (March-June)
        ELSE 
            -- Low season supplier costs
            CASE
                WHEN sup.Country IN ('China', 'South Korea', 'Japan') THEN
                    -- Asian suppliers low season
                    (ABS(CHECKSUM(NEWID())) % 1000) + 1500 -- $1500-$2500
                WHEN sup.Country IN ('Germany', 'Netherlands', 'Norway') THEN
                    -- European suppliers low season
                    (ABS(CHECKSUM(NEWID())) % 1200) + 1600 -- $1600-$2800
                WHEN sup.Country IN ('Singapore', 'UAE') THEN
                    -- Bunkering low season
                    (ABS(CHECKSUM(NEWID())) % 1000) + 1400 -- $1400-$2400
                ELSE
                    -- Other suppliers low season
                    (ABS(CHECKSUM(NEWID())) % 900) + 1300 -- $1300-$2200
            END
    END,
    -- Quantity represents volume of service
    CASE
        -- Most supplier services have small quantities
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 75 THEN 
            (ABS(CHECKSUM(NEWID())) % 4) + 1 -- 1-4 units (75% of services)
        -- Medium volume services
        WHEN (ABS(CHECKSUM(NEWID())) % 100) < 95 THEN 
            (ABS(CHECKSUM(NEWID())) % 5) + 5 -- 5-9 units (20% of services)
        -- Large volume services
        ELSE 
            (ABS(CHECKSUM(NEWID())) % 11) + 10 -- 10-20 units (5% of services)
    END,
    -- Realistic supplier service names
    CASE (ABS(CHECKSUM(NEWID())) % 15)
        WHEN 0 THEN 'Terminal Handling Service'
        WHEN 1 THEN 'Vessel Operation'
        WHEN 2 THEN 'Bunkering Service'
        WHEN 3 THEN 'Port Fees'
        WHEN 4 THEN 'Container Leasing'
        WHEN 5 THEN 'Stevedoring'
        WHEN 6 THEN 'Equipment Rental'
        WHEN 7 THEN 'Pilotage'
        WHEN 8 THEN 'Tug Assistance'
        WHEN 9 THEN 'Vessel Maintenance'
        WHEN 10 THEN 'Crew Services'
        WHEN 11 THEN 'Insurance Premium'
        WHEN 12 THEN 'Ship Agency Fee'
        WHEN 13 THEN 'Customs Brokerage'
        ELSE 'Warehousing Service'
    END
FROM SupplierInvoices si
JOIN Suppliers sup ON si.SupplierID = sup.SupplierID
ORDER BY NEWID();

-- Update CustomerInvoices with the sum of respective costs
UPDATE ci
SET ci.InvoiceAmount = ISNULL((
    SELECT SUM(cic.Cost * cic.Quantity) 
    FROM CustomerInvoiceCosts cic 
    WHERE cic.CustomerInvoiceID = ci.CustomerInvoiceID
), 0)
FROM CustomerInvoices ci;

-- Update SupplierInvoices with the sum of respective costs
UPDATE si
SET si.InvoiceAmount = ISNULL((
    SELECT SUM(sic.Cost * sic.Quantity) 
    FROM SupplierInvoiceCosts sic 
    WHERE sic.SupplierInvoiceID = si.InvoiceID
), 0)
FROM SupplierInvoices si;

-- Update Sales with the sum of associated CustomerInvoices
UPDATE s
SET s.TotalRevenue = ISNULL((
    SELECT SUM(ci.InvoiceAmount) 
    FROM CustomerInvoices ci 
    WHERE ci.SaleID = s.SaleID
), 0)
FROM Sales s;

-- Add some realistic business patterns

-- 1. Make sure most recent sales have higher rates of "Active" status
UPDATE s
SET s.Status = 'Active'
FROM Sales s
WHERE s.SaleDate > DATEADD(MONTH, -1, '2024-12-31')
AND (ABS(CHECKSUM(NEWID())) % 100) < 60; -- 60% of recent sales are active

-- 2. Make sure most recent customer invoices have higher rates of "Unpaid" status
UPDATE ci
SET ci.Status = 'Unpaid'
FROM CustomerInvoices ci
JOIN Sales s ON ci.SaleID = s.SaleID
WHERE s.SaleDate > DATEADD(MONTH, -1, '2024-12-31')
AND (ABS(CHECKSUM(NEWID())) % 100) < 40; -- 40% of recent invoices are unpaid

-- 3. Make sure most recent supplier invoices have higher rates of "Unapproved" status
UPDATE si
SET si.Status = 'Unapproved'
FROM SupplierInvoices si
JOIN Sales s ON si.SaleID = s.SaleID
WHERE s.SaleDate > DATEADD(MONTH, -1, '2024-12-31')
AND (ABS(CHECKSUM(NEWID())) % 100) < 50; -- 50% of recent supplier invoices are unapproved

-- 4. Create trend where top customers get better pricing
UPDATE cic
SET cic.Cost = cic.Cost * 0.9 -- 10% discount
FROM CustomerInvoiceCosts cic
JOIN CustomerInvoices ci ON cic.CustomerInvoiceID = ci.CustomerInvoiceID
JOIN Sales s ON ci.SaleID = s.SaleID
JOIN (
    -- Identify top 5% of customers by volume
    SELECT TOP 5 PERCENT CustomerID
    FROM Sales
    GROUP BY CustomerID
    ORDER BY COUNT(*) DESC
) t ON s.CustomerID = t.CustomerID;

-- 5. Create trend where highest volume trade lanes have better supplier rates
UPDATE sic
SET sic.Cost = sic.Cost * 0.92 -- 8% better pricing
FROM SupplierInvoiceCosts sic
JOIN SupplierInvoices si ON sic.SupplierInvoiceID = si.InvoiceID
JOIN Sales s ON si.SaleID = s.SaleID
JOIN Customers c ON s.CustomerID = c.CustomerID 
JOIN Suppliers sup ON si.SupplierID = sup.SupplierID
WHERE
(c.Country = 'China' AND sup.Country IN ('Singapore', 'South Korea')) OR 
(c.Country = 'USA' AND sup.Country = 'China') OR
(c.Country IN ('Germany', 'Netherlands') AND sup.Country IN ('China', 'South Korea'));

-- 6. Add fuel surcharge trend - increasing costs over the year to simulate fuel price rises
UPDATE cic
SET cic.Cost = cic.Cost * (1 + (MONTH(ci.InvoiceDate) * 0.005)) -- 0.5% increase per month
FROM CustomerInvoiceCosts cic
JOIN CustomerInvoices ci ON cic.CustomerInvoiceID = ci.CustomerInvoiceID
WHERE cic.Name IN ('Fuel Adjustment Factor', 'Ocean Freight FCL', 'Ocean Freight LCL');

-- 7. Create trend where air freight increases during peak season but ocean decreases in winter
-- Air freight increases in winter months
UPDATE cic
SET cic.Cost = cic.Cost * 1.15 -- 15% increase
FROM CustomerInvoiceCosts cic
JOIN CustomerInvoices ci ON cic.CustomerInvoiceID = ci.CustomerInvoiceID
WHERE cic.Name = 'Air Freight'
AND MONTH(ci.InvoiceDate) IN (11, 12, 1, 2); -- Winter months

-- Ocean freight decreases in winter months due to reduced demand
UPDATE cic
SET cic.Cost = cic.Cost * 0.9 -- 10% decrease
FROM CustomerInvoiceCosts cic
JOIN CustomerInvoices ci ON cic.CustomerInvoiceID = ci.CustomerInvoiceID
WHERE cic.Name IN ('Ocean Freight FCL', 'Ocean Freight LCL')
AND MONTH(ci.InvoiceDate) IN (1, 2, 3); -- Winter/early spring months

-- 8. Simulate COVID-19 recovery pattern - gradual increase in shipping volumes throughout the year
UPDATE s
SET s.TotalRevenue = s.TotalRevenue * (1 + ((MONTH(s.SaleDate) - 1) * 0.01)) -- 1% increase per month
FROM Sales s
WHERE MONTH(s.SaleDate) > 1; -- Starting from February

-- 9. Create pattern where refrigerated cargo has higher profit margins
UPDATE ci
SET ci.InvoiceAmount = ci.InvoiceAmount * 1.2 -- 20% higher profit margin
FROM CustomerInvoices ci
JOIN CustomerInvoiceCosts cic ON ci.CustomerInvoiceID = cic.CustomerInvoiceID
WHERE cic.Name = 'Refrigerated Cargo';

-- 10. Add trends for express services being more common before holidays
-- Increase quantity for express services before major holidays
UPDATE cic
SET cic.Quantity = cic.Quantity * 2 -- Double the quantity
FROM CustomerInvoiceCosts cic
JOIN CustomerInvoices ci ON cic.CustomerInvoiceID = ci.CustomerInvoiceID
WHERE cic.Name IN ('Express Service', 'Air Freight')
AND (
    -- Before Chinese New Year (late January)
    (MONTH(ci.InvoiceDate) = 1 AND DAY(ci.InvoiceDate) > 15) OR
    -- Before Easter (typically March/April)
    (MONTH(ci.InvoiceDate) = 3 AND DAY(ci.InvoiceDate) > 20) OR
    -- Before summer holidays (June)
    (MONTH(ci.InvoiceDate) = 6 AND DAY(ci.InvoiceDate) > 15) OR
    -- Before Christmas (December)
    (MONTH(ci.InvoiceDate) = 12 AND DAY(ci.InvoiceDate) > 1 AND DAY(ci.InvoiceDate) < 20)
);

-- 11. Create seasonal pattern for port congestion surcharges
UPDATE cic
SET cic.Cost = cic.Cost * 1.3 -- 30% increase during congestion periods
FROM CustomerInvoiceCosts cic
JOIN CustomerInvoices ci ON cic.CustomerInvoiceID = ci.CustomerInvoiceID
WHERE cic.Name = 'Port Congestion Surcharge'
AND (
    -- Chinese New Year congestion
    (MONTH(ci.InvoiceDate) IN (1, 2)) OR
    -- Summer peak congestion
    (MONTH(ci.InvoiceDate) IN (7, 8)) OR
    -- Pre-holiday congestion
    (MONTH(ci.InvoiceDate) IN (11, 12))
);

-- 12. Update CustomerInvoices and Sales again after all the adjustments
-- Update CustomerInvoices with the new sum of costs
UPDATE ci
SET ci.InvoiceAmount = ISNULL((
    SELECT SUM(cic.Cost * cic.Quantity) 
    FROM CustomerInvoiceCosts cic 
    WHERE cic.CustomerInvoiceID = ci.CustomerInvoiceID
), 0)
FROM CustomerInvoices ci;

-- Update Sales with the new sum of associated CustomerInvoices
UPDATE s
SET s.TotalRevenue = ISNULL((
    SELECT SUM(ci.InvoiceAmount) 
    FROM CustomerInvoices ci 
    WHERE ci.SaleID = s.SaleID
), 0)
FROM Sales s;

-- 13. Create seasonal variations in payment patterns
-- Make winter invoices have higher unpaid rates due to holiday disruptions
UPDATE ci
SET ci.Status = 'Unpaid'
FROM CustomerInvoices ci
WHERE MONTH(ci.InvoiceDate) IN (12, 1)
AND (ABS(CHECKSUM(NEWID())) % 100) < 25; -- 25% winter invoices unpaid

-- Make summer shipping season have more prompt payments
UPDATE ci
SET ci.Status = 'Paid'
FROM CustomerInvoices ci
WHERE MONTH(ci.InvoiceDate) IN (6, 7, 8)
AND (ABS(CHECKSUM(NEWID())) % 100) < 90; -- 90% summer invoices paid

-- 14. Create trends in supplier approval rates
-- Higher approval rates for key suppliers
UPDATE si
SET si.Status = 'Approved'
FROM SupplierInvoices si
JOIN (
    -- Identify top 10% of suppliers by volume
    SELECT TOP 10 PERCENT SupplierID
    FROM SupplierInvoices
    GROUP BY SupplierID
    ORDER BY COUNT(*) DESC
) t ON si.SupplierID = t.SupplierID
WHERE (ABS(CHECKSUM(NEWID())) % 100) < 95; -- 95% approval rate for top suppliers

-- Lower approval rates for occasional suppliers
UPDATE si
SET si.Status = 'Unapproved'
FROM SupplierInvoices si
JOIN (
    -- Identify bottom 20% of suppliers by volume
    SELECT TOP 20 PERCENT SupplierID
    FROM SupplierInvoices
    GROUP BY SupplierID
    ORDER BY COUNT(*) ASC
) bottom ON si.SupplierID = bottom.SupplierID
WHERE (ABS(CHECKSUM(NEWID())) % 100) < 30; -- 30% unapproval rate for bottom suppliers

-- 15. Create pattern where certain countries show different payment behavior
-- European customers tend to pay more reliably
UPDATE ci
SET ci.Status = 'Paid'
FROM CustomerInvoices ci
JOIN Sales s ON ci.SaleID = s.SaleID
JOIN Customers c ON s.CustomerID = c.CustomerID
WHERE c.Country IN ('Germany', 'Netherlands', 'UK', 'Norway', 'Denmark')
AND (ABS(CHECKSUM(NEWID())) % 100) < 92; -- 92% payment rate

-- Some regions have slower payment patterns
UPDATE ci
SET ci.Status = 'Unpaid'
FROM CustomerInvoices ci
JOIN Sales s ON ci.SaleID = s.SaleID
JOIN Customers c ON s.CustomerID = c.CustomerID
WHERE c.Country IN ('Brazil', 'India')
AND (ABS(CHECKSUM(NEWID())) % 100) < 35; -- 35% unpaid rate